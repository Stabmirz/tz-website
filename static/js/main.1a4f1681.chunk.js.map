{"version":3,"sources":["components/Home.js","components/NavBar.js","components/Waitlist.js","components/GifSection.js","components/MobileApp.js","components/Cards.js","components/Footer.js","components/Access.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","style","backgroundImage","process","src","alt","NavBar","to","spy","smooth","duration","Waitlist","id","type","placeholder","value","GifSection","gif","autoplay","MobileApp","Cards","Footer","Access","App","Fragment","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a4f1681.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\n\nconst Home = () => {\n  return (\n    <div className=\"hero container\" style={{ backgroundImage: `url(${process.env.PUBLIC_URL + \"/images/background.png\"})`}}>\n      <div className=\"hero-section\">\n        <div className=\"hero-img\">\n          <img src={process.env.PUBLIC_URL + '/images/ccds.png'} alt=\"cards\" />\n        </div>\n        <div className=\"hero-text\">\n          <div>\n            <h1>Its</h1>\n            <h1>Your</h1>\n            <h1>Money</h1>\n          </div>\n          <div>\n            <h1>Wherever</h1>\n            <h1>You</h1>\n            <h1>Want</h1>\n            <h1>It</h1>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport {Link} from 'react-scroll';\n\n\nconst NavBar = () => {\n    return (\n        <nav className=\"navbar fixed\">\n          <div className=\"navbar-nav\">\n            <Link \n              to=\"home\" \n              spy={true} \n              smooth={true} \n              duration={500}\n            >\n              <img src={process.env.PUBLIC_URL + '/images/logo.png'} alt=\"logo\" />\n            </Link>\n            <div className=\"links\">\n              <Link \n                className=\"nav-item nav-link\"\n                to=\"home\" \n                spy={true} \n                smooth={true} \n                duration={500}\n              >\n                Home\n              </Link>\n              <Link \n                className=\"nav-item nav-link\"\n                to=\"Waitlist\" \n                spy={true} \n                smooth={true} \n                duration={500} \n              >\n              Waitlist\n            </Link> \n            </div>\n          </div>\n        </nav>\n      );\n}\n\nexport default NavBar;\n","import React from 'react';\nimport \"./Waitlist.css\"\n\nconst Waitlist = () => {\n    return(\n        <div className=\"waitlist container\" id=\"#waitlist\">\n            <h1>\n                Join the Waitlist\n            </h1>\n            <div className=\"join-waitlist\">\n                <h5>Be one of the first to access TanZsend.</h5>\n                <br/>\n                <form>\n                    <input type=\"text\" className=\"border\" placeholder=\"name@email.com\"/>\n                    <input type=\"submit\" className=\"border\" value=\"Join Waitlist\"/>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default Waitlist;","import React from 'react';\nimport GifPlayer from 'react-gif-player';\nimport \"./GifSection.css\"\n\nconst GifSection = () =>{\n    return(\n        <div className=\"gif-section container\">\n            <div className=\"gif-container\">\n                <div className=\"text\">\n                    <h1>Spend</h1>\n                    <h1 className=\"subheader\">from All Your Cards or Accounts with Just One Card</h1>\n                </div>\n                <div className=\"img\">\n                    <GifPlayer gif={process.env.PUBLIC_URL + '/images/debit-card.gif'} autoplay={true} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default GifSection;","import React from 'react';\nimport \"./MobileApp.css\";\n\nconst MobileApp = () => {\n    return(\n        <div className=\"container\">\n            <div className=\"mobileApp-section \">\n                <div className=\"mobileApp-img col-5\" style={{ backgroundImage: `url(${process.env.PUBLIC_URL + \"/images/backgroundcolumn.png\"})`}}>\n                    <img src={process.env.PUBLIC_URL + '/images/app-transactions.png'} alt=\"mobile-app\"/>\n                </div>\n                <div className=\"mobileApp-text col-6\">\n                    <h1>Manage</h1>\n                    <h1 className=\"subheader\">All Of Your Many Cards or Accounts with Just One App</h1>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MobileApp;","import React from 'react';\nimport \"./Cards.css\";\n\nconst Cards = () => {\n    return(\n        <div className=\"container\">\n            <div className=\"cards-section \">\n                <div>\n                    <img src=\"./images/cc-white.png\" alt=\"credit card\"/>\n                    <h1>Use Just One Card</h1>\n                    <h1>For all</h1>\n                    <h1>Your Spending</h1>\n                </div>\n                <div>\n                    <img src=\"./images/transfer-white.png\" alt=\"transfer\"/>\n                    <h1>Transfer Funds</h1>\n                    <h1>from Cards</h1>\n                    <h1>or Accounts</h1>\n                </div>\n                <div>\n                    <img src=\"./images/send-to-a-friend-white.png\" alt=\"send money\"/>\n                    <h1>Send Money</h1>\n                    <h1>to a Friend</h1>\n                </div>\n                <div>\n                    <img src=\"./images/refer-a-friend-white.png\" alt=\"refer a friend\"/>\n                    <h1>Refer A Friend</h1>\n                    <h1>earn Rewards</h1>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Cards;","import React from 'react';\nimport \"./Footer.css\"\n\nconst Footer = () => {\n    return ( \n        <div className=\"footer container\">\n            <h1>Footer</h1>\n        </div>\n    );\n}\n \nexport default Footer;","import React from 'react';\nimport \"./Access.css\"\n\nconst Access = () => {\n    return ( \n        <div className=\"access container\">\n            <div className=\"access-section\">\n                <div style={{ backgroundImage: `url(${process.env.PUBLIC_URL + \"/images/smallbluegeo.png\"})`}} ></div>\n                <div>\n                    <h1>Have access to all your money</h1>\n                    <h1>with TranZend Card</h1>\n                    <h1>and use however you wish,</h1>\n                    <h1>for in-stores or online purchases.</h1>\n                    <img src={process.env.PUBLIC_URL + '/images/products-are-paid.jpg'} className=\"paid\"alt=\"cards\" />\n                    <img src={process.env.PUBLIC_URL + '/images/online-shopping.jpg'} className=\"online-shopping\" alt=\"cards\" />\n                </div>\n            </div>\n        </div>\n     );\n}\n \nexport default Access;","import React from \"react\";\nimport \"./App.css\";\nimport {Element} from 'react-scroll';\nimport { BrowserRouter as Router} from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport NavBar from \"./components/NavBar\";\nimport Waitlist from \"./components/Waitlist\";\nimport GifSection from \"./components/GifSection\";\nimport MobileApp from \"./components/MobileApp\";\nimport Cards from \"./components/Cards\";\nimport Footer from \"./components/Footer\";\nimport Access from \"./components/Access\";\n\nconst App = () => {\n  return (\n    <Router>\n      <React.Fragment>\n        <NavBar />\n        <Element id='home' name='home'>\n            <Home />\n          </Element>\n        <Element id='waitlist' name='waitlist'>\n            <Waitlist />\n        </Element>\n        <Access/>\n        <GifSection />\n        <Cards />\n        <MobileApp />\n        <Footer/>\n      </React.Fragment>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}